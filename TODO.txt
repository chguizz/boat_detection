// Set up SVM's parameters
svm = SVM::create();
svm->setType(SVM::C_SVC);
svm->setKernel(SVM::LINEAR);
svm->setTermCriteria(TermCriteria(TermCriteria::MAX_ITER, 1e4, 1e-6));
// Train the SVM with given parameters
Ptr<TrainData> td = TrainData::create(inputData, ROW_SAMPLE, inputDataLables);
svm->train(td);
cout << "-> SVM trained in " << (clock() - sTime) / double(CLOCKS_PER_SEC) << " Second(s)." << endl;

sTime = clock();
cout << "Testing images..." << endl;
cout << "-> " << (float)(testData("starfish", 86, 1) * 100) << "% accuracy in 'starfish' class." << endl;
cout << "-> " << (float)(testData("sunflower", 85, 2) * 100) << "% accuracy in 'sunflower' class." << endl;
//cout << "-> " << (float)(testData("crab", 75, 3) * 100) << "% accuracy in 'crab' class." << endl;
//cout << "-> " << (float)(testData("trilobite", 86, 4) * 100) << "% accuracy in 'trilobite' class." << endl;
cout << "-> Test completed in " << (clock() - sTime) / double(CLOCKS_PER_SEC) << " Second(s)." << endl;


------------ dictionary ----------------------
np.savetxt('bow_dict.txt', dictionary)
loaded_dictionary = np.loadtxt('bow_dict.txt')